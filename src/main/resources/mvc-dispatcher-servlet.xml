<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射-->
    <mvc:annotation-driven/>
    <!--指明controller所在的包，并扫描其中的注解-->
    <context:component-scan base-package="com.xiaomi"></context:component-scan>
    <!--静态资源(js\image等)的访问-->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>
    <!--开启注解-->
    <mvc:annotation-driven></mvc:annotation-driven>

    <!--<mvc:resources mapping="" location=""></mvc:resources>-->

    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/page/">
        </property>
        <property name="suffix" value=".jsp"></property>
    </bean>


    <!-- 支持上传文件 -->
    <!-- 上传文件的设置 ，maxUploadSize=-1，表示无穷大。uploadTempDir为上传的临时目录 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--最大上传文件大小-->
        <property name="maxUploadSize" value="10485760000"></property>

        <property name="defaultEncoding" value="utf-8"></property>
        <!--延迟加载-->
        <property name="resolveLazily" value="true"></property>
    </bean>


    <!--用于静态资源的访问-->
    <!--location元素表示webapp目录下的static包下的所有文件；
    mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b；
    该配置的作用是：DispatcherServlet不会拦截以/static开头的所有请求路径，并当作静态资源
    交由Servlet处理。-->
    <mvc:resources mapping="/static/**" location="/static"/>
    <!--servlet在找页面时，走的是dispatcherServlet（requestMapping）路线。找不到的时候会报404
    加上这个默认的servlet时候，servlet在找不到的时候会去找静态的内容。-->
    <mvc:default-servlet-handler/>
</beans>